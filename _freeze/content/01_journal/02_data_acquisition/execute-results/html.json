{
  "hash": "97c209a881698d34e558e06fd20acb28",
  "result": {
    "markdown": "---\ntitle: \"Data Acquisition\"\nauthor: \"Christian SÃ¼hl\"\n---\n\n\n\n# Database\nTrying out a connection to a database containing music information using RSQLite.\n\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-2_e66ea890bd0a112074f2f703873c7679'}\n\n```{.r .cell-code}\ncon <- RSQLite::dbConnect(drv    = SQLite(), \n                          dbname = \"../../src/Chinook_Sqlite.sqlite\") # Connect to db\n\nprint(dbListTables(con)) # Print list of available tables\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] \"Album\"         \"Artist\"        \"Customer\"      \"Employee\"     \n#>  [5] \"Genre\"         \"Invoice\"       \"InvoiceLine\"   \"MediaType\"    \n#>  [9] \"Playlist\"      \"PlaylistTrack\" \"Track\"\n```\n:::\n\n```{.r .cell-code}\nalbum_tbl <- tbl(con, \"Album\") %>% collect() # Retrieve \"Album\" table into local storage\nprint(album_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 347 x 3\n#>    AlbumId Title                                 ArtistId\n#>      <int> <chr>                                    <int>\n#>  1       1 For Those About To Rock We Salute You        1\n#>  2       2 Balls to the Wall                            2\n#>  3       3 Restless and Wild                            2\n#>  4       4 Let There Be Rock                            1\n#>  5       5 Big Ones                                     3\n#>  6       6 Jagged Little Pill                           4\n#>  7       7 Facelift                                     5\n#>  8       8 Warner 25 Anos                               6\n#>  9       9 Plays Metallica By Four Cellos               7\n#> 10      10 Audioslave                                   8\n#> # i 337 more rows\n```\n:::\n\n```{.r .cell-code}\ndbDisconnect(con) # Disconnect db session\n```\n:::\n\n\n# API\nTrying out a connection to multiple APIs containing Star Wars information and Stock Prices with credentials.\n\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-4_1a1723a0269ec56ce4f993ab82b9837e'}\n\n```{.r .cell-code}\n# Wrapped into a function\nsw_api <- function(path) {\n  url <- modify_url(url = \"https://swapi.dev\", path = glue(\"/api{path}\"))\n  resp <- GET(url)\n  stop_for_status(resp) # automatically throws an error if a request did not succeed\n}\n\nresp <- sw_api(\"/people/1\") # Retrieve info about Luke Skywalker\n\ncontent <- rawToChar(resp$content) %>% fromJSON() # Turn content into characters and convert json to list\nprint(content)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $name\n#> [1] \"Luke Skywalker\"\n#> \n#> $height\n#> [1] \"172\"\n#> \n#> $mass\n#> [1] \"77\"\n#> \n#> $hair_color\n#> [1] \"blond\"\n#> \n#> $skin_color\n#> [1] \"fair\"\n#> \n#> $eye_color\n#> [1] \"blue\"\n#> \n#> $birth_year\n#> [1] \"19BBY\"\n#> \n#> $gender\n#> [1] \"male\"\n#> \n#> $homeworld\n#> [1] \"https://swapi.dev/api/planets/1/\"\n#> \n#> $films\n#> [1] \"https://swapi.dev/api/films/1/\" \"https://swapi.dev/api/films/2/\"\n#> [3] \"https://swapi.dev/api/films/3/\" \"https://swapi.dev/api/films/6/\"\n#> \n#> $species\n#> list()\n#> \n#> $vehicles\n#> [1] \"https://swapi.dev/api/vehicles/14/\" \"https://swapi.dev/api/vehicles/30/\"\n#> \n#> $starships\n#> [1] \"https://swapi.dev/api/starships/12/\" \"https://swapi.dev/api/starships/22/\"\n#> \n#> $created\n#> [1] \"2014-12-09T13:50:51.644000Z\"\n#> \n#> $edited\n#> [1] \"2014-12-20T21:17:56.891000Z\"\n#> \n#> $url\n#> [1] \"https://swapi.dev/api/people/1/\"\n```\n:::\n:::\n\n\nNow I created a .Renviron file in the home folder and added the token in there. Now it can be accessed using `Sys.getenv('token')`.\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-5_6a49e6d5dabc231ab45fde758c38fe86'}\n\n```{.r .cell-code}\nalphavantage_api_url <- \"https://www.alphavantage.co/query\"\nticker               <- \"WDI.DE\"\n# You can pass all query parameters as a list to the query argument of GET()\nWDIQuote = GET(alphavantage_api_url, query = list('function' = \"GLOBAL_QUOTE\",\n                                       symbol     = ticker,\n                                       apikey     = Sys.getenv('token'))\n) %>% content()\nprint(WDIQuote)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $`Global Quote`\n#> $`Global Quote`$`01. symbol`\n#> [1] \"WDI.DE\"\n#> \n#> $`Global Quote`$`02. open`\n#> [1] \"0.4021\"\n#> \n#> $`Global Quote`$`03. high`\n#> [1] \"0.4099\"\n#> \n#> $`Global Quote`$`04. low`\n#> [1] \"0.3961\"\n#> \n#> $`Global Quote`$`05. price`\n#> [1] \"0.3985\"\n#> \n#> $`Global Quote`$`06. volume`\n#> [1] \"210849\"\n#> \n#> $`Global Quote`$`07. latest trading day`\n#> [1] \"2021-03-01\"\n#> \n#> $`Global Quote`$`08. previous close`\n#> [1] \"0.4109\"\n#> \n#> $`Global Quote`$`09. change`\n#> [1] \"-0.0124\"\n#> \n#> $`Global Quote`$`10. change percent`\n#> [1] \"-3.0178%\"\n```\n:::\n:::\n\n\n\n# WEB SCRAPING\n\n\n\nTrying out some webscraping examples from wikipedia and IMDB.\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-7_072bf1666c37693278d54f8a14bddff8'}\n\n```{.r .cell-code}\nurl <- \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n\nsp_500 <- url %>%\n  # read the HTML from the webpage\n  read_html() %>%\n  # Get the nodes with the id\n  html_nodes(css = \"#constituents\") %>%\n  # html_nodes(xpath = \"//*[@id='constituents']\"\") %>% \n  # Extract the table and turn the list into a tibble\n  html_table() %>% \n  .[[1]] %>% \n  as_tibble()\nprint(sp_500)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 503 x 8\n#>    Symbol Security      `GICS Sector` `GICS Sub-Industry` Headquarters Locatio~1\n#>    <chr>  <chr>         <chr>         <chr>               <chr>                 \n#>  1 MMM    3M            Industrials   Industrial Conglom~ Saint Paul, Minnesota \n#>  2 AOS    A. O. Smith   Industrials   Building Products   Milwaukee, Wisconsin  \n#>  3 ABT    Abbott        Health Care   Health Care Equipm~ North Chicago, Illino~\n#>  4 ABBV   AbbVie        Health Care   Pharmaceuticals     North Chicago, Illino~\n#>  5 ACN    Accenture     Information ~ IT Consulting & Ot~ Dublin, Ireland       \n#>  6 ATVI   Activision B~ Communicatio~ Interactive Home E~ Santa Monica, Califor~\n#>  7 ADM    ADM           Consumer Sta~ Agricultural Produ~ Chicago, Illinois     \n#>  8 ADBE   Adobe Inc.    Information ~ Application Softwa~ San Jose, California  \n#>  9 ADP    ADP           Industrials   Human Resource & E~ Roseland, New Jersey  \n#> 10 AAP    Advance Auto~ Consumer Dis~ Automotive Retail   Raleigh, North Caroli~\n#> # i 493 more rows\n#> # i abbreviated name: 1: `Headquarters Location`\n#> # i 3 more variables: `Date added` <chr>, CIK <int>, Founded <chr>\n```\n:::\n\n```{.r .cell-code}\nurl  <- \"https://www.imdb.com/chart/top/?ref_=nv_mv_250\"\nhtml <- url %>% \n  read_html()\n```\n:::\n\nTo try IMDB out I scraped the people that worked on \"The Dark Knight\" that are mentioned in the IMDB top 250 ratings page.\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-8_eaf803b2e7a582b98ef634c892b3770d'}\n\n```{.r .cell-code}\npeople <- html %>% \n  html_nodes(\".titleColumn > a\") %>% \n  .[[3]] %>% \n  html_attr(\"title\")\nprint(people)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"Christopher Nolan (dir.), Christian Bale, Heath Ledger\"\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}