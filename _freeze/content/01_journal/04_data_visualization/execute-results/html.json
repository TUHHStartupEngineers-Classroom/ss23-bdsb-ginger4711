{
  "hash": "f39461a3ea0a56c83b8e84c2b3408800",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Christian SÃ¼hl\"\n---\n\n\n# Challenge 1\nI created a graph with multiple locations from the beginning of 2020 up until now.\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_f838a82ca7958a3bfcfe99698e611b79'}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(tidyverse) # loads ggplot2\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(scales)\nlibrary(maps)\n\noptions(repr.plot.width=50, repr.plot.height=3)\n\n# Challenge 1\n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 306185 Columns: 67\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncovid_data_graph_tbl <- covid_data_tbl %>% # Read the covid data\n  filter(location == \"Europe\" | location == \"Germany\" | location == \"United Kingdom\" | location == \"France\" | location == \"Spain\" | location == \"United States\") %>% # Filter only the locations specified in the task\n  select(date,total_cases,location) %>% # Only date, total_cases and location are needed\n  filter(!is.na(total_cases)) %>% # Remove those dates where the total_cases number is not a number\n  filter(date < '2022-04-20') # Plot in task stops in may of 2022, so this data stops there as well\n\ncovid_data_dt <- as.data.table(covid_data_graph_tbl) # Convert tibble to data.frame\n\nlast_date_europe <- covid_data_dt[location == \"Europe\"][order(-date)][1]$date\nlast_date_USA <- covid_data_dt[location == \"United States\"][order(-date)][1]$date\n\naddMillions <- function(x, ...) #<== function will add \" %\" to any number, and allows for any additional formatting through \"format\".\n    format(paste0(x/(1e+06), \" M\"), ...)\n\ncovid_data_dt %>% ggplot(aes(x=date,y=total_cases),palette=\"Dark2\") + # plot total_cases over time\n  geom_line(aes(colour=location)) + # each location gets its own line\n  theme(legend.position = \"bottom\") + # position legend at the bottom\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%B '%y\") + # Change the x axis to a date axis with montly intervals and \"month 'year\" labels\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate the x-axis labels by 45 degrees so they don't collide with each other\n  scale_y_continuous(breaks = seq(0, 200000000, by = 50000000), labels = addMillions) + \n  labs( title = \"COVID-19 confirmed cases worldwide\", # Set plot title.\n        subtitle = \"As of 19/04/2022\", # Set plot subtitle.\n        y = \"Cumulative Cases\", # Set plot y-axis label.\n        colour=\"Continent / Country\") + # Set location/country legend title.\n  theme(axis.title.x=element_blank(), # Remove x axis label \n        text = element_text(size=10)) + # Increase text size\n\n  geom_label( # Display geom_label for europe and united states last data point\n    data=covid_data_dt %>% filter((location == \"Europe\" & date == last_date_europe) | (location == \"United States\" & date == last_date_USA)),\n    aes(label=total_cases),hjust=1,vjust=0.4\n  )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n# Challenge 2\nI created a world map with a blue color scale showing the relative fatality rate.\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_2e948fa3a55c67277417cf4872600ddf'}\n\n```{.r .cell-code}\n# Get Case-Fatality rate (deaths/cases)\ncovid_data_graph_tbl <- covid_data_tbl %>% # Read the covid data.\n  filter(!is.na(total_cases) & !is.na(total_deaths) & !is.na(total_deaths_per_million)) %>% # Remove those dates where the total_cases number is not a number.\n  group_by(location) %>% summarise(total_cases = sum(total_cases),total_deaths = sum(total_deaths),total_deaths_per_million = sum(total_deaths_per_million)) %>% # Group by location (country) and sum up total_cases and total_deaths over all dates.\n  mutate(fatality_rate = (total_deaths/total_cases)) %>% # Add fatality_rate column to the tibble.\n                                                         # Can be exchanged for total_deaths_per_million to visualize mortality rate.\n  select(fatality_rate,location) %>%  # Only maintain fatality_rate and location\n  mutate(location = case_when( # Replace non matching location names\n    \n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n    \n  )) %>%\n  distinct()\n\ntotal_deaths_worldwide <- covid_data_tbl %>% filter(!is.na(total_deaths)) %>% group_by(location) %>% filter(row_number()==n()) %>% summarise(total_deaths) %>%\n                                        ungroup() %>% summarise(total_deaths = sum(total_deaths))\n\nlibrary(RColorBrewer)\nlibrary(maptools)\n\n\nworld <- map_data(\"world\")\nggplot(covid_data_graph_tbl) + \n  geom_map(dat=world, map=world, \n           aes(map_id=region), fill=\"white\", color=\"black\") + \n  geom_map(map=world, \n           aes(map_id=location, fill=fatality_rate), color=\"black\") + \n  expand_limits(x = world$long, y = world$lat) +\n  labs( title = \"Confirmed COVID-19 fatality rate.\", # Set plot title.\n        subtitle = paste0(\"Around \",round(total_deaths_worldwide / 1e6, 1),\" Million confirmed COVID-19 deaths worldwide.\"), # Set plot subtitle.\n        caption = paste0(\"Date:\",format(Sys.Date(), format=\"%d/%m/%Y\")), # Set plot caption.\n        fill = \"Fatality rate\") + # Set plot legend caption.\n  theme(axis.title.x=element_blank(), # Remove x axis label. \n        axis.title.y=element_blank(), # Remove y axis label.\n        axis.ticks = element_blank(), # Remove axis ticks.\n        axis.text.x = element_blank(), # Remove x axis texts.\n        axis.text.y = element_blank(), # Remove y axis texts.\n        )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}